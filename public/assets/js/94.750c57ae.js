(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{613:function(s,e,a){"use strict";a.r(e);var n=a(20),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"css基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css基础"}},[s._v("#")]),s._v(" css基础")]),s._v(" "),a("h3",{attrs:{id:"重绘与回流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重绘与回流"}},[s._v("#")]),s._v(" 重绘与回流")]),s._v(" "),a("p",[s._v("重绘和回流是渲染步骤中的一小节，但是这两个步骤对于性能影响很大。")]),s._v(" "),a("ul",[a("li",[s._v("重绘是当节点需要更改外观而不会影响布局的，比如改变 "),a("code",[s._v("color")]),s._v(" 就叫称为重绘")]),s._v(" "),a("li",[s._v("回流是布局或者几何属性需要改变就称为回流。")])]),s._v(" "),a("p",[s._v("回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变深层次的节点很可能导致父节点的一系列回流。")]),s._v(" "),a("p",[s._v("所以以下几个动作可能会导致性能问题：")]),s._v(" "),a("ul",[a("li",[s._v("改变 window 大小")]),s._v(" "),a("li",[s._v("改变字体")]),s._v(" "),a("li",[s._v("添加或删除样式")]),s._v(" "),a("li",[s._v("文字改变")]),s._v(" "),a("li",[s._v("定位或者浮动")]),s._v(" "),a("li",[s._v("盒模型")])]),s._v(" "),a("p",[s._v("很多人不知道的是，重绘和回流其实和 Event loop 有关。")]),s._v(" "),a("ol",[a("li",[s._v("当 Event loop 执行完 Microtasks 后，会判断 document 是否需要更新。因为浏览器是 60Hz 的刷新率，每 16ms 才会更新一次。")]),s._v(" "),a("li",[s._v("然后判断是否有 "),a("code",[s._v("resize")]),s._v(" 或者 "),a("code",[s._v("scroll")]),s._v(" ，有的话会去触发事件，所以 "),a("code",[s._v("resize")]),s._v(" 和 "),a("code",[s._v("scroll")]),s._v(" 事件也是至少 16ms 才会触发一次，并且自带节流功能。")]),s._v(" "),a("li",[s._v("判断是否触发了 media query")]),s._v(" "),a("li",[s._v("更新动画并且发送事件")]),s._v(" "),a("li",[s._v("判断是否有全屏操作事件")]),s._v(" "),a("li",[s._v("执行 "),a("code",[s._v("requestAnimationFrame")]),s._v(" 回调")]),s._v(" "),a("li",[s._v("执行 "),a("code",[s._v("IntersectionObserver")]),s._v(" 回调，该方法用于判断元素是否可见，可以用于懒加载上，但是兼容性不好")]),s._v(" "),a("li",[s._v("更新界面")]),s._v(" "),a("li",[s._v("以上就是一帧中可能会做的事情。如果在一帧中有空闲时间，就会去执行 "),a("code",[s._v("requestIdleCallback")]),s._v(" 回调。")])]),s._v(" "),a("h3",{attrs:{id:"盒模型-box-sizing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#盒模型-box-sizing"}},[s._v("#")]),s._v(" 盒模型 box-sizing")]),s._v(" "),a("p",[s._v("盒模型：IE下标准模式为：content+padding+border+margin。怪异模式下为：content+margin(padding,border包含在content宽高中)")]),s._v(" "),a("p",[s._v("box-sizing: content-box|border-box|inherit;")]),s._v(" "),a("p",[a("strong",[s._v("content-box")]),s._v("\t\n这是由 CSS2.1 规定的宽度高度行为。\n宽度和高度分别应用到元素的内容框。\n在宽度和高度之外绘制元素的内边距和边框。")]),s._v(" "),a("p",[a("strong",[s._v("border-box")]),s._v("\t\n为元素设定的宽度和高度决定了元素的边框盒。\n就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。\n通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。")]),s._v(" "),a("p",[a("strong",[s._v("inherit")]),s._v("\t\n规定应从父元素继承 box-sizing 属性的值。")]),s._v(" "),a("h2",{attrs:{id:"es基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es基础"}},[s._v("#")]),s._v(" es基础")]),s._v(" "),a("h3",{attrs:{id:"new关键字-和-this详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new关键字-和-this详解"}},[s._v("#")]),s._v(" new关键字 和 this详解")]),s._v(" "),a("p",[s._v("构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。")]),s._v(" "),a("p",[s._v("构造函数用于创建一类对象，首字母要大写。")]),s._v(" "),a("p",[s._v("构造函数要和new一起使用才有意义。")]),s._v(" "),a("ol",[a("li",[s._v("新生成了一个对象")]),s._v(" "),a("li",[s._v("链接到原型")]),s._v(" "),a("li",[s._v("绑定 this")]),s._v(" "),a("li",[s._v("返回新对象")])]),s._v(" "),a("p",[s._v("在调用 "),a("code",[s._v("new")]),s._v(" 的过程中会发生以上四件事情，我们也可以试着来自己实现一个 "),a("code",[s._v("new")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function create() {\n    // 创建一个空的对象\n    let obj = new Object()\n    // 获得构造函数\n    let Con = [].shift.call(arguments)\n    // 链接到原型\n    obj.__proto__ = Con.prototype\n    // 绑定 this，执行构造函数\n    let result = Con.apply(obj, arguments)\n    // 确保 new 出来的是个对象\n    return typeof result === 'object' ? result : obj\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("strong",[s._v("现在我们需要掌握函数内部的this几个特点")])]),s._v(" "),a("p",[s._v("\\1. 函数在定义的时候this是不确定的，只有在调用的时候才可以确定")]),s._v(" "),a("p",[s._v("\\2. 一般函数直接执行，内部this指向全局window")]),s._v(" "),a("p",[s._v("\\3. 函数作为一个对象的方法，被该对象所调用，那么this指向的是该对象")]),s._v(" "),a("p",[s._v("\\4. 构造函数中的this其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过new关键字来调用，从而实现实例化")]),s._v(" "),a("h3",{attrs:{id:"介绍下原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍下原型链"}},[s._v("#")]),s._v(" 介绍下原型链")]),s._v(" "),a("p",[s._v("每个函数都有 "),a("code",[s._v("prototype")]),s._v(" 属性，除了 "),a("code",[s._v("Function.prototype.bind()")]),s._v("，该属性指向原型。")]),s._v(" "),a("p",[s._v("每个对象都有 "),a("code",[s._v("__proto__")]),s._v(" 属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 "),a("code",[s._v("[[prototype]]")]),s._v("，但是 "),a("code",[s._v("[[prototype]]")]),s._v(" 是内部属性，我们并不能访问到，所以使用 "),a("code",[s._v("_proto_")]),s._v(" 来访问。")]),s._v(" "),a("p",[s._v("对象可以通过 "),a("code",[s._v("__proto__")]),s._v(" 来寻找不属于该对象的属性，"),a("code",[s._v("__proto__")]),s._v(" 将对象连接起来组成了原型链。")]),s._v(" "),a("p",[s._v("如果你想更进一步的了解原型，可以仔细阅读 "),a("a",{attrs:{href:"https://github.com/KieSun/Blog/issues/2",target:"_blank",rel:"noopener noreferrer"}},[s._v("深度解析原型中的各个难点"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("p",[s._v("原型链是针对构造函数的，比如我先创建了一个函数，然后通过一个变量new了这个函数，那么这个被new出来的函数就会继承创建出来的那个函数的属性，然后如果我访问new出来的这个函数的某个属性，但是我并没有在这个new出来的函数中定义这个变量，那么它就会往上（向创建出它的函数中）查找，这个查找的过程就叫做原型链。")]),s._v(" "),a("p",[s._v("Object ==> 构造函数1 ==> 构造函数2")]),s._v(" "),a("p",[s._v("就和css中的继承一样，如果自身没有定义就会继承父元素的样式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function a(){};\na.prototype.name = "追梦子";\nvar b = new a();\nconsole.log(b.name); //追梦子\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"类数组和数组的区别是什么？有哪些类数组？如何转化为数组？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类数组和数组的区别是什么？有哪些类数组？如何转化为数组？"}},[s._v("#")]),s._v(" 类数组和数组的区别是什么？有哪些类数组？如何转化为数组？")]),s._v(" "),a("p",[a("strong",[s._v("类数组：")])]),s._v(" "),a("p",[s._v("1）拥有length属性，其它属性（索引）为非负整数（对象中的索引会被当做字符串来处理）;")]),s._v(" "),a("p",[s._v("2）不具有数组所具有的方法；")]),s._v(" "),a("p",[s._v("类数组是一个普通对象，而真实的数组是Array类型。")]),s._v(" "),a("p",[s._v('常见的类数组有: 函数的参数 arugments, DOM 对象列表(比如通过 document.querySelectorAll 得到的列表), jQuery 对象 (比如 $("div")).')]),s._v(" "),a("p",[s._v("类数组可以转换为数组:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//第一种方法Array.prototype.slice.call(arrayLike, start);//第二种方法[...arrayLike];//第三种方法:Array.from(arrayLike);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("**PS: **任何定义了遍历器（Iterator）接口的对象，都可以用扩展运算符转为真正的数组。")]),s._v(" "),a("p",[s._v("Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象。")]),s._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")]),s._v(" [] == ![]")]),s._v(" "),a("p",[s._v("true")]),s._v(" "),a("p",[s._v("如图，任意两种类型比较时，如果不是同一个类型比较的话，则按如图方式进行相应类型转换，如对象和布尔比较的话，"),a("strong",[s._v("对象 => 字符串 => 数值 布尔值 => 数值")]),s._v("。\n另外，我们来看下一些需要”特别照顾”的。")]),s._v(" "),a("p",[s._v("来看一个有趣的题")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[] == false;\n![] == false;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这两个的结果都是true,第一个是，对象 => 字符串 => 数值0 false转换为数字0,这个是true应该没问题，\n第二个前边多了个!，则直接转换为布尔值再取反，")]),s._v(" "),a("p",[s._v("在条件判断时，除了 "),a("code",[s._v("undefined")]),s._v("， "),a("code",[s._v("null")]),s._v("， "),a("code",[s._v("false")]),s._v("， "),a("code",[s._v("NaN")]),s._v("， "),a("code",[s._v("''")]),s._v("， "),a("code",[s._v("0")]),s._v("， "),a("code",[s._v("-0")]),s._v("，其他所有值都转为 "),a("code",[s._v("true")]),s._v("，包括所有对象。")]),s._v(" "),a("p",[s._v("所以! []这个[] => true 取反为false,所以[] == false为true。")]),s._v(" "),a("h3",{attrs:{id:"还有一些需要记住的，像："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#还有一些需要记住的，像："}},[s._v("#")]),s._v(" 还有一些需要记住的，像：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("undefined == null //true undefined和null 比较返回true，二者和其他值比较返回false\nNumber(null) //0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"对闭包的看法，使用场景，为什么要用闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对闭包的看法，使用场景，为什么要用闭包"}},[s._v("#")]),s._v(" 对闭包的看法，使用场景，为什么要用闭包")]),s._v(" "),a("p",[s._v("闭包的定义很简单：函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B 就被称为闭包。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function A() {\n  let a = 1\n  function B() {\n      console.log(a)\n  }\n  return B\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("你是否会疑惑，为什么函数 A 已经弹出调用栈了，为什么函数 B 还能引用到函数 A 中的变量。因为函数 A 中的变量这时候是存储在堆上的。现在的 JS 引擎可以通过逃逸分析辨别出哪些变量需要存储在堆上，哪些需要存储在栈上。")]),s._v(" "),a("p",[s._v("经典面试题，循环中使用闭包解决 "),a("code",[s._v("var")]),s._v(" 定义函数的问题")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for ( var i=1; i<=5; i++) {\n\tsetTimeout( function timer() {\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("首先因为 "),a("code",[s._v("setTimeout")]),s._v(" 是个异步函数，所有会先把循环全部执行完毕，这时候 "),a("code",[s._v("i")]),s._v(" 就是 6 了，所以会输出一堆 6。")]),s._v(" "),a("p",[s._v("解决办法两种，第一种使用闭包")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for (var i = 1; i <= 5; i++) {\n  (function(j) {\n    setTimeout(function timer() {\n      console.log(j);\n    }, j * 1000);\n  })(i);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("第二种就是使用 "),a("code",[s._v("setTimeout")]),s._v(" 的第三个参数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for ( var i=1; i<=5; i++) {\n\tsetTimeout( function timer(j) {\n\t\tconsole.log( j );\n\t}, i*1000, i);\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("第三种就是使用 "),a("code",[s._v("let")]),s._v(" 定义 "),a("code",[s._v("i")]),s._v(" 了")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for ( let i=1; i<=5; i++) {\n\tsetTimeout( function timer() {\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("因为对于 "),a("code",[s._v("let")]),s._v(" 来说，他会创建一个块级作用域，相当于")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("{ // 形成块级作用域\n  let i = 0\n  {\n    let ii = i\n    setTimeout( function timer() {\n        console.log( ii );\n    }, i*1000 );\n  }\n  i++\n  {\n    let ii = i\n  }\n  i++\n  {\n    let ii = i\n  }\n  ...\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h3",{attrs:{id:"foreach、for-in、for-of三者区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreach、for-in、for-of三者区别"}},[s._v("#")]),s._v(" forEach、for in、for of三者区别")]),s._v(" "),a("p",[s._v("forEach更多的用来遍历数组")]),s._v(" "),a("p",[s._v("for in 一般常用来遍历对象或json")]),s._v(" "),a("p",[s._v("for of数组对象都可以遍历，遍历对象需要通过和Object.keys()")]),s._v(" "),a("p",[s._v("for in循环出的是key，for of循环出的是value")]),s._v(" "),a("h2",{attrs:{id:"call-apply-bind-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-apply-bind-区别"}},[s._v("#")]),s._v(" call, apply, bind 区别")]),s._v(" "),a("p",[s._v("首先说下前两者的区别。")]),s._v(" "),a("p",[a("code",[s._v("call")]),s._v(" 和 "),a("code",[s._v("apply")]),s._v(" 都是为了解决改变 "),a("code",[s._v("this")]),s._v(" 的指向。作用都是相同的，只是传参的方式不同。")]),s._v(" "),a("p",[s._v("除了第一个参数外，"),a("code",[s._v("call")]),s._v(" 可以接收一个参数列表，"),a("code",[s._v("apply")]),s._v(" 只接受一个参数数组。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let a = {\n    value: 1\n}\nfunction getValue(name, age) {\n    console.log(name)\n    console.log(age)\n    console.log(this.value)\n}\ngetValue.call(a, 'yck', '24')\ngetValue.apply(a, ['yck', '24'])\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"模拟实现-call-和-apply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模拟实现-call-和-apply"}},[s._v("#")]),s._v(" 模拟实现 call 和 apply")]),s._v(" "),a("p",[s._v("可以从以下几点来考虑如何实现")]),s._v(" "),a("ul",[a("li",[s._v("不传入第一个参数，那么默认为 "),a("code",[s._v("window")])]),s._v(" "),a("li",[s._v("改变了 this 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Function.prototype.myCall = function (context) {\n  var context = context || window\n  // 给 context 添加一个属性\n  // getValue.call(a, 'yck', '24') => a.fn = getValue\n  context.fn = this\n  // 将 context 后面的参数取出来\n  var args = [...arguments].slice(1)\n  // getValue.call(a, 'yck', '24') => a.fn('yck', '24')\n  var result = context.fn(...args)\n  // 删除 fn\n  delete context.fn\n  return result\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("以上就是 "),a("code",[s._v("call")]),s._v(" 的思路，"),a("code",[s._v("apply")]),s._v(" 的实现也类似")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Function.prototype.myApply = function (context) {\n  var context = context || window\n  context.fn = this\n\n  var result\n  // 需要判断是否存储第二个参数\n  // 如果存在，就将第二个参数展开\n  if (arguments[1]) {\n    result = context.fn(...arguments[1])\n  } else {\n    result = context.fn()\n  }\n\n  delete context.fn\n  return result\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("code",[s._v("bind")]),s._v(" 和其他两个方法作用也是一致的，只是该方法会返回一个函数。并且我们可以通过 "),a("code",[s._v("bind")]),s._v(" 实现柯里化。")]),s._v(" "),a("p",[s._v("同样的，也来模拟实现下 "),a("code",[s._v("bind")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Function.prototype.myBind = function (context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Error')\n  }\n  var _this = this\n  var args = [...arguments].slice(1)\n  // 返回一个函数\n  return function F() {\n    // 因为返回了一个函数，我们可以 new F()，所以需要判断\n    if (this instanceof F) {\n      return new _this(...args, ...arguments)\n    }\n    return _this.apply(context, args.concat(...arguments))\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"为什么-0-1-0-2-0-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-0-1-0-2-0-3"}},[s._v("#")]),s._v(" 为什么 0.1 + 0.2 != 0.3")]),s._v(" "),a("p",[s._v("因为 JS 采用 IEEE 754 双精度版本（64位），并且只要采用 IEEE 754 的语言都有该问题。")]),s._v(" "),a("p",[s._v("我们都知道计算机表示十进制是采用二进制表示的，所以 "),a("code",[s._v("0.1")]),s._v(" 在二进制表示为")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// (0011) 表示循环\n0.1 = 2^-4 * 1.10011(0011)\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("那么如何得到这个二进制的呢，我们可以来演算下")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://yck-1254263422.cos.ap-shanghai.myqcloud.com/blog/2019-06-01-43727.png",alt:"img"}})]),s._v(" "),a("p",[s._v("小数算二进制和整数不同。乘法计算时，只计算小数位，整数位用作每一位的二进制，并且得到的第一位为最高位。所以我们得出 "),a("code",[s._v("0.1 = 2^-4 * 1.10011(0011)")]),s._v("，那么 "),a("code",[s._v("0.2")]),s._v(" 的演算也基本如上所示，只需要去掉第一步乘法，所以得出 "),a("code",[s._v("0.2 = 2^-3 * 1.10011(0011)")]),s._v("。")]),s._v(" "),a("p",[s._v("回来继续说 IEEE 754 双精度。六十四位中符号位占一位，整数位占十一位，其余五十二位都为小数位。因为 "),a("code",[s._v("0.1")]),s._v(" 和 "),a("code",[s._v("0.2")]),s._v(" 都是无限循环的二进制了，所以在小数位末尾处需要判断是否进位（就和十进制的四舍五入一样）。")]),s._v(" "),a("p",[s._v("所以 "),a("code",[s._v("2^-4 * 1.10011...001")]),s._v(" 进位后就变成了 "),a("code",[s._v("2^-4 * 1.10011(0011 * 12次)010")]),s._v(" 。那么把这两个二进制加起来会得出 "),a("code",[s._v("2^-2 * 1.0011(0011 * 11次)0100")]),s._v(" , 这个值算成十进制就是 "),a("code",[s._v("0.30000000000000004")])]),s._v(" "),a("p",[s._v("下面说一下原生解决办法，如下代码所示")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("parseFloat((0.1 + 0.2).toFixed(10))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"es6-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-7"}},[s._v("#")]),s._v(" es6-7")]),s._v(" "),a("h2",{attrs:{id:"async-和-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-和-await"}},[s._v("#")]),s._v(" async 和 await")]),s._v(" "),a("p",[s._v("一个函数如果加上 "),a("code",[s._v("async")]),s._v(" ，那么该函数就会返回一个 "),a("code",[s._v("Promise")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('async function test() {\n  return "1";\n}\nconsole.log(test()); // -> Promise {<resolved>: "1"}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("可以把 "),a("code",[s._v("async")]),s._v(" 看成将函数返回值使用 "),a("code",[s._v("Promise.resolve()")]),s._v(" 包裹了下。")]),s._v(" "),a("p",[a("code",[s._v("await")]),s._v(" 只能在 "),a("code",[s._v("async")]),s._v(" 函数中使用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function sleep() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      console.log(\'finish\')\n      resolve("sleep");\n    }, 2000);\n  });\n}\nasync function test() {\n  let value = await sleep();\n  console.log("object");\n}\ntest()\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("上面代码会先打印 "),a("code",[s._v("finish")]),s._v(" 然后再打印 "),a("code",[s._v("object")]),s._v(" 。因为 "),a("code",[s._v("await")]),s._v(" 会等待 "),a("code",[s._v("sleep")]),s._v(" 函数 "),a("code",[s._v("resolve")]),s._v(" ，所以即使后面是同步代码，也不会先去执行同步代码再来执行异步代码。")]),s._v(" "),a("p",[a("code",[s._v("async 和 await")]),s._v(" 相比直接使用 "),a("code",[s._v("Promise")]),s._v(" 来说，优势在于处理 "),a("code",[s._v("then")]),s._v(" 的调用链，能够更清晰准确的写出代码。缺点在于滥用 "),a("code",[s._v("await")]),s._v(" 可能会导致性能问题，因为 "),a("code",[s._v("await")]),s._v(" 会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性。")]),s._v(" "),a("p",[s._v("下面来看一个使用 "),a("code",[s._v("await")]),s._v(" 的代码。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a = 0\nvar b = async () => {\n  a = a + await 10\n  console.log('2', a) // -> '2' 10\n  a = (await 10) + a\n  console.log('3', a) // -> '3' 20\n}\nb()\na++\nconsole.log('1', a) // -> '1' 1\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("对于以上代码你可能会有疑惑，这里说明下原理")]),s._v(" "),a("ul",[a("li",[s._v("首先函数 "),a("code",[s._v("b")]),s._v(" 先执行，在执行到 "),a("code",[s._v("await 10")]),s._v(" 之前变量 "),a("code",[s._v("a")]),s._v(" 还是 0，因为在 "),a("code",[s._v("await")]),s._v(" 内部实现了 "),a("code",[s._v("generators")]),s._v(" ，"),a("code",[s._v("generators")]),s._v(" 会保留堆栈中东西，所以这时候 "),a("code",[s._v("a = 0")]),s._v(" 被保存了下来")]),s._v(" "),a("li",[s._v("因为 "),a("code",[s._v("await")]),s._v(" 是异步操作，遇到"),a("code",[s._v("await")]),s._v("就会立即返回一个"),a("code",[s._v("pending")]),s._v("状态的"),a("code",[s._v("Promise")]),s._v("对象，暂时返回执行代码的控制权，使得函数外的代码得以继续执行，所以会先执行 "),a("code",[s._v("console.log('1', a)")])]),s._v(" "),a("li",[s._v("这时候同步代码执行完毕，开始执行异步代码，将保存下来的值拿出来使用，这时候 "),a("code",[s._v("a = 10")])]),s._v(" "),a("li",[s._v("然后后面就是常规执行代码了")])]),s._v(" "),a("h2",{attrs:{id:"proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[s._v("#")]),s._v(" Proxy")]),s._v(" "),a("p",[s._v("Proxy 是 ES6 中新增的功能，可以用来自定义对象中的操作")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let p = new Proxy(target, handler);\n// `target` 代表需要添加代理的对象\n// `handler` 用来自定义对象中的操作\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("可以很方便的使用 Proxy 来实现一个数据绑定和监听")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let onWatch = (obj, setBind, getLogger) => {\n  let handler = {\n    get(target, property, receiver) {\n      getLogger(target, property)\n      return Reflect.get(target, property, receiver);\n    },\n    set(target, property, value, receiver) {\n      setBind(value);\n      return Reflect.set(target, property, value);\n    }\n  };\n  return new Proxy(obj, handler);\n};\n\nlet obj = { a: 1 }\nlet value\nlet p = onWatch(obj, (v) => {\n  value = v\n}, (target, property) => {\n  console.log(`Get '${property}' = ${target[property]}`);\n})\np.a = 2 // bind `value` to `2`\np.a // -> Get 'a' = 2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h3",{attrs:{id:"如何使用set去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用set去重"}},[s._v("#")]),s._v(" 如何使用Set去重")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let arr = [12,43,23,43,68,12];\nlet item = [...new Set(arr)];\nconsole.log(item);//[12, 43, 23, 68]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"介绍下-set、map的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍下-set、map的区别"}},[s._v("#")]),s._v(" 介绍下 Set、Map的区别")]),s._v(" "),a("p",[s._v("应用场景Set用于数据重组，Map用于数据储存")]),s._v(" "),a("p",[s._v("Set：")]),s._v(" "),a("p",[s._v("（1）成员不能重复\n　　（2）只有键值没有键名，类似数组\n　　（3）可以遍历，方法有add, delete,has")]),s._v(" "),a("p",[s._v("Map:")]),s._v(" "),a("p",[s._v("（1）本质上是健值对的集合，类似集合\n　　（2）可以遍历，可以跟各种数据格式转换")]),s._v(" "),a("h3",{attrs:{id:"ecmascript-6-怎么写-class-，为何会出现-class？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-6-怎么写-class-，为何会出现-class？"}},[s._v("#")]),s._v(" ECMAScript 6 怎么写 class ，为何会出现 class？")]),s._v(" "),a("p",[s._v("ES6的class可以看作是一个语法糖，它的绝大部分功能ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法")]),s._v(" "),a("p",[s._v("["),a("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),s._v("](javascript:void(0)😉")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//定义类\nclass Point { \n  constructor(x,y) { \n      //构造方法\n       this.x = x; //this关键字代表实例对象\n       this.y = y; \n  } toString() {\n       return '(' + this.x + ',' + this.y + ')'; \n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("["),a("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),s._v("](javascript:void(0)😉")]),s._v(" "),a("p"),s._v(" "),a("h3",{attrs:{id:"promise构造函数是同步执行还是异步执行，那么-then-方法呢？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise构造函数是同步执行还是异步执行，那么-then-方法呢？"}},[s._v("#")]),s._v(" Promise构造函数是同步执行还是异步执行，那么 then 方法呢？")]),s._v(" "),a("p",[s._v("promise构造函数是同步执行的，then方法是异步执行的")]),s._v(" "),a("p"),s._v(" "),a("h3",{attrs:{id:"settimeout、promise、async-await-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#settimeout、promise、async-await-的区别"}},[s._v("#")]),s._v(" setTimeout、Promise、Async/Await 的区别")]),s._v(" "),a("p",[s._v("事件循环中分为宏任务队列和微任务队列")]),s._v(" "),a("p",[s._v("其中setTimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行")]),s._v(" "),a("p",[s._v("promise.then里的回调函数会放到相应宏任务的微任务队列里，等宏任务里面的同步代码执行完再执行")]),s._v(" "),a("p",[s._v("async函数表示函数里面可能会有异步方法，await后面跟一个表达式")]),s._v(" "),a("p",[s._v("async方法执行时，遇到await会立即执行表达式，然后把表达式后面的代码放到微任务队列里，让出执行栈让同步代码先执行")]),s._v(" "),a("p"),s._v(" "),a("h3",{attrs:{id:"promise有几种状态，什么时候会进入catch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise有几种状态，什么时候会进入catch"}},[s._v("#")]),s._v(" promise有几种状态，什么时候会进入catch")]),s._v(" "),a("p",[s._v("三个状态：pending、fulfilled、reject")]),s._v(" "),a("p",[s._v("两个过程：padding -> fulfilled、padding -> rejected")]),s._v(" "),a("p",[s._v("当pending为rejectd时，会进入catch")]),s._v(" "),a("h2",{attrs:{id:"浏览器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[s._v("#")]),s._v(" 浏览器")]),s._v(" "),a("h3",{attrs:{id:"promise和settimeout执行先后的区别？微任务和宏任务？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise和settimeout执行先后的区别？微任务和宏任务？"}},[s._v("#")]),s._v(" Promise和setTimeout执行先后的区别？微任务和宏任务？")]),s._v(" "),a("p",[s._v("众所周知 JS 是门非阻塞单线程语言，因为在最初 JS 就是为了和浏览器交互而诞生的。如果 JS 是门多线程的语言话，我们在多个线程中处理 DOM 就可能会发生问题（一个线程中新加节点，另一个线程中删除节点），当然可以引入读写锁解决这个问题。")]),s._v(" "),a("p",[s._v("JS 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 Task（有多种 task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("console.log('script start')\n\nsetTimeout(function() {\n  console.log('setTimeout')\n}, 0)\n\nconsole.log('script end')\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("以上代码虽然 "),a("code",[s._v("setTimeout")]),s._v(" 延时为 0，其实还是异步。这是因为 HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。所以 "),a("code",[s._v("setTimeout")]),s._v(" 还是会在 "),a("code",[s._v("script end")]),s._v(" 之后打印。")]),s._v(" "),a("p",[s._v("不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 "),a("code",[s._v("jobs")]),s._v("，macrotask 称为 "),a("code",[s._v("task")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("console.log('script start')\n\nsetTimeout(function() {\n  console.log('setTimeout')\n}, 0)\n\nnew Promise(resolve => {\n  console.log('Promise')\n  resolve()\n})\n  .then(function() {\n    console.log('promise1')\n  })\n  .then(function() {\n    console.log('promise2')\n  })\n\nconsole.log('script end')\n// script start => Promise => script end => promise1 => promise2 => setTimeout\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("以上代码虽然 "),a("code",[s._v("setTimeout")]),s._v(" 写在 "),a("code",[s._v("Promise")]),s._v(" 之前，但是因为 "),a("code",[s._v("Promise")]),s._v(" 属于微任务而 "),a("code",[s._v("setTimeout")]),s._v(" 属于宏任务，所以会有以上的打印。")]),s._v(" "),a("p",[s._v("微任务包括 "),a("code",[s._v("process.nextTick")]),s._v(" ，"),a("code",[s._v("promise")]),s._v(" ，"),a("code",[s._v("Object.observe")]),s._v(" ，"),a("code",[s._v("MutationObserver")])]),s._v(" "),a("p",[s._v("宏任务包括 "),a("code",[s._v("script")]),s._v(" ， "),a("code",[s._v("setTimeout")]),s._v(" ，"),a("code",[s._v("setInterval")]),s._v(" ，"),a("code",[s._v("setImmediate")]),s._v(" ，"),a("code",[s._v("I/O")]),s._v(" ，"),a("code",[s._v("UI rendering")])]),s._v(" "),a("p",[s._v("很多人有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了 "),a("code",[s._v("script")]),s._v(" ，浏览器会先执行一个宏任务，接下来有异步代码的话就先执行微任务。")]),s._v(" "),a("p",[s._v("所以正确的一次 Event loop 顺序是这样的")]),s._v(" "),a("ol",[a("li",[s._v("执行同步代码，这属于宏任务")]),s._v(" "),a("li",[s._v("执行栈为空，查询是否有微任务需要执行")]),s._v(" "),a("li",[s._v("执行所有微任务")]),s._v(" "),a("li",[s._v("必要的话渲染 UI")]),s._v(" "),a("li",[s._v("然后开始下一轮 Event loop，执行宏任务中的异步代码")])]),s._v(" "),a("p",[s._v("通过上述的 Event loop 顺序可知，如果宏任务中的异步代码有大量的计算并且需要操作 DOM 的话，为了更快的 界面响应，我们可以把操作 DOM 放入微任务中。")]),s._v(" "),a("h2",{attrs:{id:"vue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[s._v("#")]),s._v(" Vue")]),s._v(" "),a("h3",{attrs:{id:"vue-生命周期的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-生命周期的理解"}},[s._v("#")]),s._v(" Vue 生命周期的理解")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("生命周期钩子")]),s._v(" "),a("th",[s._v("详细")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("beforeCreate")]),s._v(" "),a("td",[s._v("在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。")])]),s._v(" "),a("tr",[a("td",[s._v("created")]),s._v(" "),a("td",[s._v("实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。")])]),s._v(" "),a("tr",[a("td",[s._v("beforeMount")]),s._v(" "),a("td",[s._v("在挂载开始之前被调用：相关的 render 函数首次被调用。")])]),s._v(" "),a("tr",[a("td",[s._v("mounted")]),s._v(" "),a("td",[s._v("el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。")])]),s._v(" "),a("tr",[a("td",[s._v("beforeUpdate")]),s._v(" "),a("td",[s._v("数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。")])]),s._v(" "),a("tr",[a("td",[s._v("updated")]),s._v(" "),a("td",[s._v("由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。")])]),s._v(" "),a("tr",[a("td",[s._v("activated")]),s._v(" "),a("td",[s._v("keep-alive 组件激活时调用。")])]),s._v(" "),a("tr",[a("td",[s._v("deactivated")]),s._v(" "),a("td",[s._v("keep-alive 组件停用时调用。")])]),s._v(" "),a("tr",[a("td",[s._v("beforeDestroy")]),s._v(" "),a("td",[s._v("实例销毁之前调用。在这一步，实例仍然完全可用。")])]),s._v(" "),a("tr",[a("td",[s._v("destroyed")]),s._v(" "),a("td",[s._v("Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。")])])])]),s._v(" "),a("h3",{attrs:{id:"组件中-data-为什么是一个函数？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件中-data-为什么是一个函数？"}},[s._v("#")]),s._v(" 组件中 data 为什么是一个函数？")]),s._v(" "),a("p",[s._v("不使用return包裹的数据会在项目的全局可见，会造成变量污染；使用return包裹后数据中变量只在当前组件中生效，不会影响其他组件。\n当一个组件被定义， data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。")]),s._v(" "),a("h3",{attrs:{id:"介绍虚拟dom，虚拟-dom-的优缺点？虚拟-dom-实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍虚拟dom，虚拟-dom-的优缺点？虚拟-dom-实现原理"}},[s._v("#")]),s._v(" 介绍虚拟DOM，虚拟 DOM 的优缺点？虚拟 DOM 实现原理")]),s._v(" "),a("p",[s._v("众所周知，操作 DOM 是很耗费性能的一件事情，既然如此，我们可以考虑通过 JS 对象来模拟 DOM 对象，毕竟操作 JS 对象比操作 DOM 省时的多。")]),s._v(" "),a("p",[s._v("举个例子")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 假设这里模拟一个 ul，其中包含了 5 个 li\n;[1, 2, 3, 4, 5][\n  // 这里替换上面的 li\n  (1, 2, 5, 4)\n]\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("从上述例子中，我们一眼就可以看出先前的 ul 中的第三个 li 被移除了，四五替换了位置。")]),s._v(" "),a("p",[s._v("如果以上操作对应到 DOM 中，那么就是以下代码")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 删除第三个 li\nul.childNodes[2].remove()\n// 将第四个 li 和第五个交换位置\nlet fromNode = ul.childNodes[4]\nlet toNode = node.childNodes[3]\nlet cloneFromNode = fromNode.cloneNode(true)\nlet cloenToNode = toNode.cloneNode(true)\nul.replaceChild(cloneFromNode, toNode)\nul.replaceChild(cloenToNode, fromNode)\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("当然在实际操作中，我们还需要给每个节点一个标识，作为判断是同一个节点的依据。所以这也是 Vue 和 React 中官方推荐列表里的节点使用唯一的 "),a("code",[s._v("key")]),s._v(" 来保证性能。")]),s._v(" "),a("p",[s._v("那么既然 DOM 对象可以通过 JS 对象来模拟，反之也可以通过 JS 对象来渲染出对应的 DOM")]),s._v(" "),a("p",[s._v("以下是一个 JS 对象模拟 DOM 对象的简单实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("export default class Element {\n  /**\n   * @param {String} tag 'div'\n   * @param {Object} props { class: 'item' }\n   * @param {Array} children [ Element1, 'text']\n   * @param {String} key option\n   */\n  constructor(tag, props, children, key) {\n    this.tag = tag\n    this.props = props\n    if (Array.isArray(children)) {\n      this.children = children\n    } else if (isString(children)) {\n      this.key = children\n      this.children = null\n    }\n    if (key) this.key = key\n  }\n  // 渲染\n  render() {\n    let root = this._createElement(\n      this.tag,\n      this.props,\n      this.children,\n      this.key\n    )\n    document.body.appendChild(root)\n    return root\n  }\n  create() {\n    return this._createElement(this.tag, this.props, this.children, this.key)\n  }\n  // 创建节点\n  _createElement(tag, props, child, key) {\n    // 通过 tag 创建节点\n    let el = document.createElement(tag)\n    // 设置节点属性\n    for (const key in props) {\n      if (props.hasOwnProperty(key)) {\n        const value = props[key]\n        el.setAttribute(key, value)\n      }\n    }\n    if (key) {\n      el.setAttribute('key', key)\n    }\n    // 递归添加子节点\n    if (child) {\n      child.forEach(element => {\n        let child\n        if (element instanceof Element) {\n          child = this._createElement(\n            element.tag,\n            element.props,\n            element.children,\n            element.key\n          )\n        } else {\n          child = document.createTextNode(element)\n        }\n        el.appendChild(child)\n      })\n    }\n    return el\n  }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br")])]),a("p",[s._v("####Virtual Dom 算法简述")]),s._v(" "),a("p",[s._v("既然我们已经通过 JS 来模拟实现了 DOM，那么接下来的难点就在于如何判断旧的对象和新的对象之间的差异。")]),s._v(" "),a("p",[s._v("DOM 是多叉树的结构，如果需要完整的对比两颗树的差异，那么需要的时间复杂度会是 O(n ^ 3)，这个复杂度肯定是不能接受的。于是 React 团队优化了算法，实现了 O(n) 的复杂度来对比差异。")]),s._v(" "),a("p",[s._v("实现 O(n) 复杂度的关键就是只对比同层的节点，而不是跨层对比，这也是考虑到在实际业务中很少会去跨层的移动 DOM 元素。")]),s._v(" "),a("p",[s._v("所以判断差异的算法就分为了两步")]),s._v(" "),a("ul",[a("li",[s._v("首先从上至下，从左往右遍历对象，也就是树的深度遍历，这一步中会给每个节点添加索引，便于最后渲染差异")]),s._v(" "),a("li",[s._v("一旦节点有子元素，就去判断子元素是否有不同")])]),s._v(" "),a("p",[s._v("####Virtual Dom 算法实现")]),s._v(" "),a("p",[s._v("首先我们来实现树的递归算法，在实现该算法前，先来考虑下两个节点对比会有几种情况")]),s._v(" "),a("ol",[a("li",[s._v("新的节点的 "),a("code",[s._v("tagName")]),s._v(" 或者 "),a("code",[s._v("key")]),s._v(" 和旧的不同，这种情况代表需要替换旧的节点，并且也不再需要遍历新旧节点的子元素了，因为整个旧节点都被删掉了")]),s._v(" "),a("li",[s._v("新的节点的 "),a("code",[s._v("tagName")]),s._v(" 和 "),a("code",[s._v("key")]),s._v("（可能都没有）和旧的相同，开始遍历子树")]),s._v(" "),a("li",[s._v("没有新的节点，那么什么都不用做")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import { StateEnums, isString, move } from './util'\nimport Element from './element'\n\nexport default function diff(oldDomTree, newDomTree) {\n  // 用于记录差异\n  let pathchs = {}\n  // 一开始的索引为 0\n  dfs(oldDomTree, newDomTree, 0, pathchs)\n  return pathchs\n}\n\nfunction dfs(oldNode, newNode, index, patches) {\n  // 用于保存子树的更改\n  let curPatches = []\n  // 需要判断三种情况\n  // 1.没有新的节点，那么什么都不用做\n  // 2.新的节点的 tagName 和 `key` 和旧的不同，就替换\n  // 3.新的节点的 tagName 和 key（可能都没有） 和旧的相同，开始遍历子树\n  if (!newNode) {\n  } else if (newNode.tag === oldNode.tag && newNode.key === oldNode.key) {\n    // 判断属性是否变更\n    let props = diffProps(oldNode.props, newNode.props)\n    if (props.length) curPatches.push({ type: StateEnums.ChangeProps, props })\n    // 遍历子树\n    diffChildren(oldNode.children, newNode.children, index, patches)\n  } else {\n    // 节点不同，需要替换\n    curPatches.push({ type: StateEnums.Replace, node: newNode })\n  }\n\n  if (curPatches.length) {\n    if (patches[index]) {\n      patches[index] = patches[index].concat(curPatches)\n    } else {\n      patches[index] = curPatches\n    }\n  }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])]),a("h4",{attrs:{id:"判断属性的更改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断属性的更改"}},[s._v("#")]),s._v(" 判断属性的更改")]),s._v(" "),a("p",[s._v("判断属性的更改也分三个步骤")]),s._v(" "),a("ol",[a("li",[s._v("遍历旧的属性列表，查看每个属性是否还存在于新的属性列表中")]),s._v(" "),a("li",[s._v("遍历新的属性列表，判断两个列表中都存在的属性的值是否有变化")]),s._v(" "),a("li",[s._v("在第二步中同时查看是否有属性不存在与旧的属性列列表中")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function diffProps(oldProps, newProps) {\n  // 判断 Props 分以下三步骤\n  // 先遍历 oldProps 查看是否存在删除的属性\n  // 然后遍历 newProps 查看是否有属性值被修改\n  // 最后查看是否有属性新增\n  let change = []\n  for (const key in oldProps) {\n    if (oldProps.hasOwnProperty(key) && !newProps[key]) {\n      change.push({\n        prop: key\n      })\n    }\n  }\n  for (const key in newProps) {\n    if (newProps.hasOwnProperty(key)) {\n      const prop = newProps[key]\n      if (oldProps[key] && oldProps[key] !== newProps[key]) {\n        change.push({\n          prop: key,\n          value: newProps[key]\n        })\n      } else if (!oldProps[key]) {\n        change.push({\n          prop: key,\n          value: newProps[key]\n        })\n      }\n    }\n  }\n  return change\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("h3",{attrs:{id:"vue-的父组件和子组件生命周期钩子函数执行顺序？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-的父组件和子组件生命周期钩子函数执行顺序？"}},[s._v("#")]),s._v(" Vue 的父组件和子组件生命周期钩子函数执行顺序？")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/thinheader/p/9462125.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.cnblogs.com/thinheader/p/9462125.html"),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("加载渲染过程")])]),s._v(" "),a("p",[a("code",[s._v("父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted")])]),s._v(" "),a("ul",[a("li",[s._v("子组件更新过程")])]),s._v(" "),a("p",[a("code",[s._v("父beforeUpdate->子beforeUpdate->子updated->父updated")])]),s._v(" "),a("ul",[a("li",[s._v("父组件更新过程")])]),s._v(" "),a("p",[a("code",[s._v("父beforeUpdate->父updated")])]),s._v(" "),a("ul",[a("li",[s._v("销毁过程")])]),s._v(" "),a("p",[a("code",[s._v("父beforeDestroy->子beforeDestroy->子destroyed->父destroyed")])]),s._v(" "),a("h3",{attrs:{id:"computed-和-watch-的区别和运用的场景？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computed-和-watch-的区别和运用的场景？"}},[s._v("#")]),s._v(" computed 和 watch 的区别和运用的场景？")]),s._v(" "),a("p",[s._v("**computed：**通过属性计算而得来的属性")]),s._v(" "),a("p",[s._v("**1、**computed内部的函数在调用时不加()。")]),s._v(" "),a("p",[s._v("**2、**computed是依赖vm中data的属性变化而变化的，也就是说，当data中的属性发生改变的时候，当前函数才会执行，data中的属性没有改变的时候，当前函数不会执行。")]),s._v(" "),a("p",[s._v("**3、**computed中的函数必须用return返回。")]),s._v(" "),a("p",[s._v("**4、**在computed中不要对data中的属性进行赋值操作。如果对data中的属性进行赋值操作了，就是data中的属性发生改变，从而触发computed中的函数，形成死循环了。")]),s._v(" "),a("p",[s._v("**5、**当computed中的函数所依赖的属性没有发生改变，那么调用当前函数的时候会从缓存中读取。")]),s._v(" "),a("p",[s._v("使用场景：当一个值受多个属性影响的时候------------购物车商品结算")]),s._v(" "),a("p",[s._v("**watch：**属性监听")]),s._v(" "),a("p",[s._v("**1、**watch中的函数名称必须要和data中的属性名一致，因为watch是依赖data中的属性，当data中的属性发生改变的时候，watch中的函数就会执行。")]),s._v(" "),a("p",[s._v("**2、**watch中的函数有两个参数，前者是newVal，后者是oldVal。")]),s._v(" "),a("p",[s._v("**3、**watch中的函数是不需要调用的。")]),s._v(" "),a("p",[s._v('**4、**watch只会监听数据的值是否发生改变，而不会去监听数据的地址是否发生改变。也就是说，watch想要监听引用类型数据的变化，需要进行深度监听。"obj.name"(){}------如果obj的属性太多，这种方法的效率很低，obj:{handler(newVal){},deep:true}------用handler+deep的方式进行深度监听。')]),s._v(" "),a("p",[s._v("**5、**特殊情况下，watch无法监听到数组的变化，特殊情况就是说更改数组中的数据时，数组已经更改，但是视图没有更新。更改数组必须要用splice()或者$set。this.arr.splice(0,1,100)-----修改arr中第0项开始的1个数据为100，this.$set(this.arr,0,100)-----修改arr第0项值为100。")]),s._v(" "),a("p",[s._v("**6、**immediate:true    页面首次加载的时候做一次监听。")]),s._v(" "),a("p",[s._v("使用场景：当一条数据的更改影响到多条数据的时候---------搜索框")]),s._v(" "),a("p",[a("strong",[s._v("区别：")])]),s._v(" "),a("p",[s._v("**1、**功能上：computed是计算属性，watch是监听一个值的变化，然后执行对应的回调。")]),s._v(" "),a("p",[s._v("**2、**是否调用缓存：computed中的函数所依赖的属性没有发生变化，那么调用当前的函数的时候会从缓存中读取，而watch在每次监听的值发生变化的时候都会执行回调。")]),s._v(" "),a("p",[s._v("**3、**是否调用return：computed中的函数必须要用return返回，watch中的函数不是必须要用return。")]),s._v(" "),a("p",[s._v("**4、**使用场景：computed----当一个属性受多个属性影响的时候，使用computed-------购物车商品结算。watch----当一条数据影响多条数据的时候，使用watch-------搜索框。")]),s._v(" "),a("h3",{attrs:{id:"vue-组件间通信有哪几种方式？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-组件间通信有哪几种方式？"}},[s._v("#")]),s._v(" Vue 组件间通信有哪几种方式？")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000019208626",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://segmentfault.com/a/1190000019208626"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("常见使用场景可以分为三类：")]),s._v(" "),a("ul",[a("li",[s._v("父子通信：")])]),s._v(" "),a("p",[s._v("父向子传递数据是通过 props，子向父是通过 events（"),a("code",[s._v("$emit")]),s._v("）；通过父链 / 子链也可以通信（"),a("code",[s._v("$parent")]),s._v(" / "),a("code",[s._v("$children")]),s._v("）；ref 也可以访问组件实例；provide / inject API；"),a("code",[s._v("$attrs/$listeners")])]),s._v(" "),a("ul",[a("li",[s._v("兄弟通信：")])]),s._v(" "),a("p",[s._v("Bus；Vuex")]),s._v(" "),a("ul",[a("li",[s._v("跨级通信：")])]),s._v(" "),a("p",[s._v("Bus；Vuex；provide / inject API、"),a("code",[s._v("$attrs/$listeners")])]),s._v(" "),a("h3",{attrs:{id:"vue-router-路由模式有几种？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-路由模式有几种？"}},[s._v("#")]),s._v(" vue-router 路由模式有几种？")]),s._v(" "),a("p",[s._v("实际上存在三种模式：")]),s._v(" "),a("p",[s._v("Hash:      使用URL的hash值来作为路由。支持所有浏览器。")]),s._v(" "),a("p",[s._v("History:   以来HTML5 History API 和服务器配置。参考官网中HTML5 History模式")]),s._v(" "),a("p",[s._v("Abstract： 支持所有javascript运行模式。如果发现没有浏览器的API，路由会自动强制进入这个模式。")]),s._v(" "),a("p",[s._v("我们可以用如下代码"),a("strong",[s._v("修改成history模式")]),s._v("：")]),s._v(" "),a("p",[s._v("["),a("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),s._v("](javascript:void(0)😉")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import Vue from 'vue'\nimport Router from 'vue-router'\nimport Main from '@/components/Main'\nVue.use(Router)\n\nexport default new Router({\n  mode: 'history',\n  routes: [\n    {\n      path: '/',\n      component: Main\n    }\n  ]\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"vuex-是什么？-有哪几种属性？在何种场景下遇到？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex-是什么？-有哪几种属性？在何种场景下遇到？"}},[s._v("#")]),s._v(" vuex 是什么？ 有哪几种属性？在何种场景下遇到？")]),s._v(" "),a("p",[s._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。简单点说，方便父子组件及组件之间的数据传递。\n有 5 种，分别是 state、getter、mutation、action、module")]),s._v(" "),a("p",[a("strong",[s._v("vuex 的 store 是什么？")]),s._v("\nvuex 就是一个仓库，仓库里放了很多对象。其中 state 就是数据源存放地，对应于一般 vue 对象里面的 datastate 里面存放的数据是响应式的，vue 组件从 store 读取数据，若是 store 中的数据发生改变，依赖这相数据的组件也会发生更新它通过 mapState 把全局的 state 和 getters 映射到当前组件的 computed 计算属性。")]),s._v(" "),a("p",[a("strong",[s._v("vuex 的 getter 是什么？")]),s._v("\ngetter 可以对 state 进行计算操作，它就是 store 的计算属性虽然在组件内也可以做计算属性，但是 getters 可以在多给件之间复用如果一个状态只在一个组件内使用，是可以不用 getters。")]),s._v(" "),a("p",[a("strong",[s._v("vuex 的 mutation 是什么？")]),s._v("\n更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。也就是说，前面两个都是状态值本身，mutations才是改变状态的执行者。\n注意：mutations只能是同步地更改状态。")]),s._v(" "),a("p",[a("strong",[s._v("vuex 的 action 是什么？")]),s._v("\naction 类似于 muation, 不同在于：action 提交的是 mutation,而不是直接变更状态action 可以包含任意异步操作 vue 中 ajax 请求代码应该写在组件的 methods 中还是 vuex 的 action 中。")]),s._v(" "),a("p",[a("strong",[s._v("vuex 的 module 是什么？")]),s._v("\n面对复杂的应用程序，当管理的状态比较多时；我们需要将vuex的store对象分割成模块(modules)。")]),s._v(" "),a("h2",{attrs:{id:"webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[s._v("#")]),s._v(" webpack")]),s._v(" "),a("h3",{attrs:{id:"webpack整个生命周期，loader和plugin有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack整个生命周期，loader和plugin有什么区别"}},[s._v("#")]),s._v(" webpack整个生命周期，loader和plugin有什么区别")]),s._v(" "),a("p",[s._v("【Loader】：用于对模块源码的转换，loader描述了webpack如何处理非javascript模块，并且在buld中引入这些依赖。loader可以将文件从不同的语言（如TypeScript）转换为JavaScript，或者将内联图像转换为data URL。比如说：CSS-Loader，Style-Loader等。")]),s._v(" "),a("p",[s._v("loader的使用很简单：")]),s._v(" "),a("p",[s._v("在webpack.config.js中指定loader。module.rules可以指定多个loader，对项目中的各个loader有个全局概览。")]),s._v(" "),a("p",[s._v("loader是运行在NodeJS中，可以用options对象进行配置。plugin可以为loader带来更多特性。loader可以进行压缩，打包，语言翻译等等。")]),s._v(" "),a("p",[s._v("loader从模板路径解析，npm install node_modules。也可以自定义loader，命名XXX-loader。")]),s._v(" "),a("p",[s._v("语言类的处理器loader：CoffeeScript，TypeScript，ESNext（Bable）,Sass,Less,Stylus。任何开发技术栈都可以使用webpack。")]),s._v(" "),a("p",[s._v("【Plugin】：目的在于解决loader无法实现的其他事，从打包优化和压缩，到重新定义环境变量，功能强大到可以用来处理各种各样的任务。webpack提供了很多开箱即用的插件：CommonChunkPlugin主要用于提取第三方库和公共模块，避免首屏加载的bundle文件，或者按需加载的bundle文件体积过大，导致加载时间过长，是一把优化的利器。而在多页面应用中，更是能够为每个页面间的应用程序共享代码创建bundle。")]),s._v(" "),a("p",[s._v("webpack功能强大，难点在于它的配置文件，webpack4默认不需要配置文件，可以通过mode选项为webpack指定了一些默认的配置，mode分为：development/production，默认是production。")]),s._v(" "),a("p",[s._v("插件可以携带参数，所以在plugins属性传入new实例。")]),s._v(" "),a("p",[s._v("【Mode】可以在config文件里面配置，也可以在CLI参数中配置：webpack --mode=production（一般会选择在CLI，也就是npm scripts里面进行配置）。")]),s._v(" "),a("p",[s._v("在webpack4以下版本，webpack3.XX，通过plugins进行环境变量的配置。")]),s._v(" "),a("p",[s._v("【resolve】模块，resolver是个库，帮助webpack找到bundle需要引入的模块代码，打包时，webpack使用enhanced-resolve来解析路径。")]),s._v(" "),a("h3",{attrs:{id:"介绍观察者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍观察者模式"}},[s._v("#")]),s._v(" 介绍观察者模式")]),s._v(" "),a("p",[s._v("当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。")]),s._v(" "),a("p",[s._v("**意图：**定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。")]),s._v(" "),a("p",[s._v("**主要解决：**一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。")]),s._v(" "),a("p",[s._v("**何时使用：**一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。")]),s._v(" "),a("p",[s._v("**如何解决：**使用面向对象技术，可以将这种依赖关系弱化。")]),s._v(" "),a("p",[s._v("**关键代码：**在抽象类里有一个 ArrayList 存放观察者们。")]),s._v(" "),a("p",[a("strong",[s._v("应用实例：")]),s._v(" 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。")]),s._v(" "),a("p",[a("strong",[s._v("优点：")]),s._v(" 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。")]),s._v(" "),a("p",[a("strong",[s._v("缺点：")]),s._v(" 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。")]),s._v(" "),a("p",[a("strong",[s._v("使用场景：")])]),s._v(" "),a("ul",[a("li",[s._v("一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。")]),s._v(" "),a("li",[s._v("一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。")]),s._v(" "),a("li",[s._v("一个对象必须通知其他对象，而并不知道这些对象是谁。")])]),s._v(" "),a("h3",{attrs:{id:"观察者和订阅-发布的区别，各自用在哪里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者和订阅-发布的区别，各自用在哪里"}},[s._v("#")]),s._v(" 观察者和订阅-发布的区别，各自用在哪里")]),s._v(" "),a("p",[s._v("在翻阅资料的时候，有人把观察者（Observer）模式等同于发布（Publish）/订阅（Subscribe）模式，也有人认为这两种模式还是存在差异，而我认为确实是存在差异的，本质上的区别是调度的地方不同。")]),s._v(" "),a("p",[a("strong",[s._v("观察者模式")])]),s._v(" "),a("p",[s._v("比较概念的解释是，目标和观察者是基类，目标提供维护观察者的一系列方法，观察者提供更新接口。具体观察者和具体目标继承各自的基类，然后具体观察者把自己注册到具体目标里，在具体目标发生变化时候，调度观察者的更新方法。")]),s._v(" "),a("p",[s._v("比如有个“天气中心”的具体目标A，专门监听天气变化，而有个显示天气的界面的观察者B，B就把自己注册到A里，当A触发天气变化，就调度B的更新方法，并带上自己的上下文。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://images2015.cnblogs.com/blog/555379/201603/555379-20160313183429007-1351424959.png",alt:"img"}})]),s._v(" "),a("p",[s._v("![img](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/%E8%AE%A2%E9%98%85.png)")]),s._v(" "),a("p",[a("strong",[s._v("发布/订阅模式")])]),s._v(" "),a("p",[s._v("比较概念的解释是，订阅者把自己想订阅的事件注册到调度中心，当该事件触发时候，发布者发布该事件到调度中心（顺带上下文），由调度中心统一调度订阅者注册到调度中心的处理代码。")]),s._v(" "),a("p",[s._v("比如有个界面是实时显示天气，它就订阅天气事件（注册到调度中心，包括处理程序），当天气变化时（定时获取数据），就作为发布者发布天气信息到调度中心，调度中心就调度订阅者的天气处理程序。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://images2015.cnblogs.com/blog/555379/201603/555379-20160313183439366-1623019133.png",alt:"img"}})]),s._v(" "),a("p",[s._v("![img](file:///C:/Users/ADMINI~1/AppData/Local/Temp/enhtmlclip/%E8%AE%A2%E9%98%85(1).png)")]),s._v(" "),a("p",[a("strong",[s._v("总结")])]),s._v(" "),a("p",[s._v("\\1. 从两张图片可以看到，最大的区别是调度的地方。")]),s._v(" "),a("p",[s._v("虽然两种模式都存在订阅者和发布者（具体观察者可认为是订阅者、具体目标可认为是发布者），但是观察者模式是由具体目标调度的，而发布/订阅模式是统一由调度中心调的，所以观察者模式的订阅者与发布者之间是存在依赖的，而发布/订阅模式则不会。")]),s._v(" "),a("p",[s._v("\\2. 两种模式都可以用于松散耦合，改进代码管理和潜在的复用。")]),s._v(" "),a("h2",{attrs:{id:"安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[s._v("#")]),s._v(" 安全")]),s._v(" "),a("h3",{attrs:{id:"csrf跨域攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf跨域攻击"}},[s._v("#")]),s._v(" csrf跨域攻击")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("跨站请求伪造")]),s._v("（英语：Cross-site request forgery），也被称为 "),a("strong",[s._v("one-click attack")]),s._v("或者 "),a("strong",[s._v("session riding")]),s._v("，通常缩写为 "),a("strong",[s._v("CSRF")]),s._v(" 或者 "),a("strong",[s._v("XSRF")]),s._v("， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。["),a("a",{attrs:{href:"https://www.wikiwand.com/zh/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0#citenoteRistic1",target:"_blank",rel:"noopener noreferrer"}},[s._v("1]"),a("OutboundLink")],1),s._v(" 跟"),a("a",{attrs:{href:"https://www.wikiwand.com/zh/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC",target:"_blank",rel:"noopener noreferrer"}},[s._v("跨網站指令碼"),a("OutboundLink")],1),s._v("（XSS）相比，"),a("strong",[s._v("XSS")]),s._v(" 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。")])]),s._v(" "),a("p",[s._v("简单点说，CSRF 就是利用用户的登录态发起恶意请求。")]),s._v(" "),a("p",[s._v("####如何攻击")]),s._v(" "),a("p",[s._v("假设网站中有一个通过 Get 请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<img src=\"http://www.domain.com/xxx?comment='attack'\" />\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("如果接口是 Post 提交的，就相对麻烦点，需要用表单来提交接口")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<form action="http://www.domain.com/xxx" id="CSRF" method="post">\n  <input name="comment" value="attack" type="hidden" />\n</form>\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("####如何防御")]),s._v(" "),a("p",[s._v("防范 CSRF 可以遵循以下几种规则：")]),s._v(" "),a("ol",[a("li",[s._v("Get 请求不对数据进行修改")]),s._v(" "),a("li",[s._v("不让第三方网站访问到用户 Cookie")]),s._v(" "),a("li",[s._v("阻止第三方网站请求接口")]),s._v(" "),a("li",[s._v("请求时附带验证信息，比如验证码或者 token")])]),s._v(" "),a("p",[s._v("####SameSite")]),s._v(" "),a("p",[s._v("可以对 Cookie 设置 "),a("code",[s._v("SameSite")]),s._v(" 属性。该属性设置 Cookie 不随着跨域请求发送，该属性可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。")]),s._v(" "),a("p",[s._v("####验证 Referer")]),s._v(" "),a("p",[s._v("对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的。")]),s._v(" "),a("p",[s._v("####Token")]),s._v(" "),a("p",[s._v("服务器下发一个随机 Token（算法不能复杂），每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。")]),s._v(" "),a("h3",{attrs:{id:"xss攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss攻击"}},[s._v("#")]),s._v(" xss攻击")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("跨网站指令码")]),s._v("（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程式的安全漏洞攻击，是"),a("a",{attrs:{href:"https://www.wikiwand.com/zh-hans/%E4%BB%A3%E7%A2%BC%E6%B3%A8%E5%85%A5",target:"_blank",rel:"noopener noreferrer"}},[s._v("代码注入"),a("OutboundLink")],1),s._v("的一种。它允许恶意使用者将程式码注入到网页上，其他使用者在观看网页时就会受到影响。这类攻击通常包含了 HTML 以及使用者端脚本语言。")])]),s._v(" "),a("p",[s._v("XSS 分为三种：反射型，存储型和 DOM-based")]),s._v(" "),a("p",[s._v("####如何攻击")]),s._v(" "),a("p",[s._v("XSS 通过修改 HTML 节点或者执行 JS 代码来攻击网站。")]),s._v(" "),a("p",[s._v("例如通过 URL 获取某些参数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\x3c!-- http://www.domain.com?name=<script>alert(1)<\/script> --\x3e\n<div>{{name}}</div>\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上述 URL 输入可能会将 HTML 改为 "),a("code",[s._v("alert(1)")]),s._v(" ，这样页面中就凭空多了一段可执行脚本。这种攻击类型是反射型攻击，也可以说是 DOM-based 攻击。")]),s._v(" "),a("p",[s._v("也有另一种场景，比如写了一篇包含攻击代码 "),a("code",[s._v("alert(1)")]),s._v(" 的文章，那么可能浏览文章的用户都会被攻击到。这种攻击类型是存储型攻击，也可以说是 DOM-based 攻击，并且这种攻击打击面更广。")]),s._v(" "),a("p",[s._v("####如何防御")]),s._v(" "),a("p",[s._v("最普遍的做法是转义输入输出的内容，对于引号，尖括号，斜杠进行转义")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function escape(str) {\n  str = str.replace(/&/g, '&amp;')\n  str = str.replace(/</g, '&lt;')\n  str = str.replace(/>/g, '&gt;')\n  str = str.replace(/\"/g, '&quto;')\n  str = str.replace(/'/g, '&#39;')\n  str = str.replace(/`/g, '&#96;')\n  str = str.replace(/\\//g, '&#x2F;')\n  return str\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("通过转义可以将攻击代码 "),a("code",[s._v("alert(1)")]),s._v(" 变成")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// -> &lt;script&gt;alert(1)&lt;&#x2F;script&gt;\nescape('<script>alert(1)<\/script>')\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("对于显示富文本来说，不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。这种情况通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var xss = require(\'xss\')\nvar html = xss(\'<h1 id="title">XSS Demo</h1><script>alert("xss");<\/script>\')\n// -> <h1>XSS Demo</h1>&lt;script&gt;alert("xss");&lt;/script&gt;\nconsole.log(html)\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("以上示例使用了 "),a("code",[s._v("js-xss")]),s._v(" 来实现。可以看到在输出中保留了 "),a("code",[s._v("h1")]),s._v(" 标签且过滤了 "),a("code",[s._v("script")]),s._v(" 标签")]),s._v(" "),a("h2",{attrs:{id:"http"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[s._v("#")]),s._v(" http")]),s._v(" "),a("h3",{attrs:{id:"http跨域、解决跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http跨域、解决跨域"}},[s._v("#")]),s._v(" http跨域、解决跨域")]),s._v(" "),a("h4",{attrs:{id:"jsonp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[s._v("#")]),s._v(" JSONP")]),s._v(" "),a("p",[s._v("JSONP 的原理很简单，就是利用 "),a("code",[s._v("标签没有跨域限制的漏洞。通过")]),s._v(" 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<script src="http://domain/api?param1=a&param2=b&callback=jsonp"><\/script>\n<script>\n    function jsonp(data) {\n    \tconsole.log(data)\n\t}\n<\/script>\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("JSONP 使用简单且兼容性不错，但是只限于 "),a("code",[s._v("get")]),s._v(" 请求。")]),s._v(" "),a("p",[s._v("在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP，以下是简单实现")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function jsonp(url, jsonpCallback, success) {\n  let script = document.createElement('script')\n  script.src = url\n  script.async = true\n  script.type = 'text/javascript'\n  window[jsonpCallback] = function(data) {\n    success && success(data)\n  }\n  document.body.appendChild(script)\n}\njsonp('http://xxx', 'callback', function(value) {\n  console.log(value)\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("####CORS")]),s._v(" "),a("p",[s._v("CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 "),a("code",[s._v("XDomainRequest")]),s._v(" 来实现。")]),s._v(" "),a("p",[s._v("浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。")]),s._v(" "),a("p",[s._v("服务端设置 "),a("code",[s._v("Access-Control-Allow-Origin")]),s._v(" 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。")]),s._v(" "),a("p",[s._v("####document.domain")]),s._v(" "),a("p",[s._v("该方式只能用于二级域名相同的情况下，比如 "),a("code",[s._v("a.test.com")]),s._v(" 和 "),a("code",[s._v("b.test.com")]),s._v(" 适用于该方式。")]),s._v(" "),a("p",[s._v("只需要给页面添加 "),a("code",[s._v("document.domain = 'test.com'")]),s._v(" 表示二级域名都相同就可以实现跨域")]),s._v(" "),a("p",[s._v("####postMessage")]),s._v(" "),a("p",[s._v("这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 发送消息端\nwindow.parent.postMessage('message', 'http://test.com')\n// 接收消息端\nvar mc = new MessageChannel()\nmc.addEventListener('message', event => {\n  var origin = event.origin || event.originalEvent.origin\n  if (origin === 'http://test.com') {\n    console.log('验证通过')\n  }\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"cookie，localstorage，sessionstorage，indexdb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie，localstorage，sessionstorage，indexdb"}},[s._v("#")]),s._v(" cookie，localStorage，sessionStorage，indexDB")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("特性")]),s._v(" "),a("th",[s._v("cookie")]),s._v(" "),a("th",[s._v("localStorage")]),s._v(" "),a("th",[s._v("sessionStorage")]),s._v(" "),a("th",[s._v("indexDB")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("数据生命周期")]),s._v(" "),a("td",[s._v("一般由服务器生成，可以设置过期时间")]),s._v(" "),a("td",[s._v("除非被清理，否则一直存在")]),s._v(" "),a("td",[s._v("页面关闭就清理")]),s._v(" "),a("td",[s._v("除非被清理，否则一直存在")])]),s._v(" "),a("tr",[a("td",[s._v("数据存储大小")]),s._v(" "),a("td",[s._v("4K")]),s._v(" "),a("td",[s._v("5M")]),s._v(" "),a("td",[s._v("5M")]),s._v(" "),a("td",[s._v("无限")])]),s._v(" "),a("tr",[a("td",[s._v("与服务端通信")]),s._v(" "),a("td",[s._v("每次都会携带在 header 中，对于请求性能影响")]),s._v(" "),a("td",[s._v("不参与")]),s._v(" "),a("td",[s._v("不参与")]),s._v(" "),a("td",[s._v("不参与")])])])]),s._v(" "),a("p",[s._v("从上表可以看到，"),a("code",[s._v("cookie")]),s._v(" 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 "),a("code",[s._v("localStorage")]),s._v(" 和 "),a("code",[s._v("sessionStorage")]),s._v(" 。对于不怎么改变的数据尽量使用 "),a("code",[s._v("localStorage")]),s._v(" 存储，否则可以用 "),a("code",[s._v("sessionStorage")]),s._v(" 存储。")]),s._v(" "),a("p",[s._v("对于 "),a("code",[s._v("cookie")]),s._v("，我们还需要注意安全性。")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("属性")]),s._v(" "),a("th",[s._v("作用")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("value")]),s._v(" "),a("td",[s._v("如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识")])]),s._v(" "),a("tr",[a("td",[s._v("http-only")]),s._v(" "),a("td",[s._v("不能通过 JS 访问 Cookie，减少 XSS 攻击")])]),s._v(" "),a("tr",[a("td",[s._v("secure")]),s._v(" "),a("td",[s._v("只能在协议为 HTTPS 的请求中携带")])]),s._v(" "),a("tr",[a("td",[s._v("same-site")]),s._v(" "),a("td",[s._v("规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击")])])])])])}),[],!1,null,null,null);e.default=t.exports}}]);